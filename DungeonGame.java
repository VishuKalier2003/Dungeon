/* The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon...
The dungeon consists of m x n rooms laid out in a 2D grid... Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess...
The knight has an initial health point represented by a positive integer... If at any point his health point drops to 0 or below, he dies immediately...
Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms;
other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers)...
To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step...
Return the knight's minimum initial health so that he can rescue the princess...
Note that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned...
* Eg 1 : Input = [ -2, -3, 3 ]                       Output = -2 + -3 + 3 + 1 + 5 = 7
*                [ -5,-10, 1 ]
*                [ 10, 30, 5 ] 
* Eg 2 : Input = [0]                                 Output = 1
*/
import java.util.*;
public class DungeonGame
{
    public int MinimumHealth(int dungeon[][])
    {
        int memonization[][] = new int[dungeon.length][dungeon[0].length];  // Creating the Memonization matrix...
        for(int i =0; i < memonization.length; i++)
            Arrays.fill(memonization[i], -1);    // Filling every matrix cell with -1...
        int result = DynamicProgramming(dungeon, 0, 0, memonization);  // Performing Dynamic Programming...
        if((result == 0) && (dungeon[0][0] < 0))
            result = dungeon[0][0];   // If the cell is single, then the value will be set to 0...
        return result >= 0 ? 1 : -1 * result + 1;   // If single cell return 1, else reverse the magnitude of result with addition of 1, since we need the knight alive...
    }
    public int DynamicProgramming(int dungeon[][], int x, int y, int memonization[][])
    {
        if((x >= dungeon.length) || (y >= dungeon[0].length))   // When traversing after end...
            return Integer.MIN_VALUE;
        if((x == dungeon.length - 1) || (y == dungeon[0].length)) // When reached the end...
            return dungeon[x][y] >= 0 ? 0 : dungeon[x][y];
        if(memonization[x][y] != -1)    // If the DP cell is changed due to Dynamic Programming...
            return memonization[x][y];   // Return the cell value in the cell...
        int row = DynamicProgramming(dungeon, x + 1, y, memonization);  // Traversing right...
        int col = DynamicProgramming(dungeon, x, y + 1, memonization);  // Traversing down...
        int answer = dungeon[x][y] + Math.max(row, col);      // Taking the maximum of the given rows and columns...
        return memonization[x][y] = answer <= 0 ? answer : 0;  // If the answer is negative, the answer is possible return the result...
    }
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int m, n;
        System.out.print("Enter number of rows : ");
        m = sc.nextInt();
        System.out.print("Enter number of columns : ");
        n = sc.nextInt();
        int matrix[][] = new int[m][n];
        for(int i = 0; i < matrix.length; i++)
        {
            for(int j = 0; j < matrix[0].length; j++)
            {
                System.out.print("Enter row "+(i+1)+" and column "+(j+1)+" value : ");
                matrix[i][j] = sc.nextInt();
            }
        }
        DungeonGame dungeongame = new DungeonGame();    // Object creation...
        n = dungeongame.MinimumHealth(matrix);      // Function calling...
        System.out.println("The Minimum health to survive in the dungeon : "+n);
        sc.close();
    }
}

// Time Complexity - O(N x M) time...
// Space Complexity - O(N x M) space...